digraph "classes" {
rankdir=BT
charset="utf-8"
"rateslib.rs.ADOrder" [color="black", fontcolor="black", label=<{ADOrder|One : str<br ALIGN="LEFT"/>Two : str<br ALIGN="LEFT"/>Zero : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"rateslib.rs.Cal" [color="black", fontcolor="black", label=<{Cal|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"rateslib.rs.Ccy" [color="black", fontcolor="black", label=<{Ccy|name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"rateslib.rs.Convention" [color="black", fontcolor="black", label=<{Convention|Act360 : str<br ALIGN="LEFT"/>Act365F : str<br ALIGN="LEFT"/>Act365FPlus : str<br ALIGN="LEFT"/>ActActICMA : str<br ALIGN="LEFT"/>ActActISDA : str<br ALIGN="LEFT"/>Bus252 : str<br ALIGN="LEFT"/>One : str<br ALIGN="LEFT"/>OnePlus : str<br ALIGN="LEFT"/>Thirty360 : str<br ALIGN="LEFT"/>Thirty360ISDA : str<br ALIGN="LEFT"/>ThirtyE360 : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"rateslib.rs.Curve" [color="black", fontcolor="black", label=<{Curve|ad<br ALIGN="LEFT"/>convention<br ALIGN="LEFT"/>id : str<br ALIGN="LEFT"/>interpolation : str<br ALIGN="LEFT"/>modifier<br ALIGN="LEFT"/>nodes : dict[datetime, Number]<br ALIGN="LEFT"/>|index_value(date: datetime): Number<br ALIGN="LEFT"/>set_ad_order(ad: ADOrder): None<br ALIGN="LEFT"/>to_json(): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"rateslib.curves.curves.Curve" [color="black", fontcolor="black", label=<{Curve|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"rateslib.default.Defaults" [color="black", fontcolor="black", label=<{Defaults|algorithm : str<br ALIGN="LEFT"/>base_currency : str<br ALIGN="LEFT"/>calc_mode : dict<br ALIGN="LEFT"/>calc_mode_futures : str<br ALIGN="LEFT"/>calendars : dict[str, NamedCal \| UnionCal \| Cal]<br ALIGN="LEFT"/>cds_premium_accrued : bool<br ALIGN="LEFT"/>cds_protection_discretization : int<br ALIGN="LEFT"/>cds_recovery_rate : float<br ALIGN="LEFT"/>convention : str<br ALIGN="LEFT"/>curve_caching : bool<br ALIGN="LEFT"/>curve_caching_max : int<br ALIGN="LEFT"/>curve_not_in_solver : str<br ALIGN="LEFT"/>endpoints : str<br ALIGN="LEFT"/>eom : bool<br ALIGN="LEFT"/>eom_fx : bool<br ALIGN="LEFT"/>eval_mode : str<br ALIGN="LEFT"/>ex_div : int<br ALIGN="LEFT"/>fixing_method : str<br ALIGN="LEFT"/>fixing_method_param : dict<br ALIGN="LEFT"/>fixings<br ALIGN="LEFT"/>frequency_months : dict<br ALIGN="LEFT"/>fx_delivery_lag : int<br ALIGN="LEFT"/>fx_delta_type : str<br ALIGN="LEFT"/>fx_option_metric : str<br ALIGN="LEFT"/>headers : dict<br ALIGN="LEFT"/>index_lag : int<br ALIGN="LEFT"/>index_method : str<br ALIGN="LEFT"/>ini_lambda : tuple<br ALIGN="LEFT"/>interpolation : dict<br ALIGN="LEFT"/>modifier : str<br ALIGN="LEFT"/>multi_csa_steps : list<br ALIGN="LEFT"/>no_fx_fixings_for_xcs : str<br ALIGN="LEFT"/>notional : float<br ALIGN="LEFT"/>payment_lag : int<br ALIGN="LEFT"/>payment_lag_exchange : int<br ALIGN="LEFT"/>payment_lag_specific : dict<br ALIGN="LEFT"/>pool : int<br ALIGN="LEFT"/>settle : int<br ALIGN="LEFT"/>spec : dict<br ALIGN="LEFT"/>spread_compound_method : str<br ALIGN="LEFT"/>stub : str<br ALIGN="LEFT"/>stub_length : str<br ALIGN="LEFT"/>tag : str<br ALIGN="LEFT"/>|print(): str<br ALIGN="LEFT"/>reset_defaults(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"rateslib.rs.Dual" [color="black", fontcolor="black", label=<{Dual|dual : str<br ALIGN="LEFT"/>real : float<br ALIGN="LEFT"/>vars : list[str]<br ALIGN="LEFT"/>|to_dual2(): 'Dual2'<br ALIGN="LEFT"/>vars_from(other: 'Dual', real: float, vars: Sequence[str], dual: Sequence[float]): 'Dual'<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"rateslib.rs.Dual2" [color="black", fontcolor="black", label=<{Dual2|dual : str<br ALIGN="LEFT"/>dual2 : str<br ALIGN="LEFT"/>real : float<br ALIGN="LEFT"/>vars : list[str]<br ALIGN="LEFT"/>|grad1_manifold(vars: Sequence[str]): list['Dual2']<br ALIGN="LEFT"/>to_dual(): Dual<br ALIGN="LEFT"/>vars_from(other: 'Dual2', real: float, vars: list[str], dual: list[float], dual2: list[float]): 'Dual2'<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"rateslib.rs.FXRate" [color="black", fontcolor="black", label=<{FXRate|ad : int<br ALIGN="LEFT"/>pair : str<br ALIGN="LEFT"/>rate : str<br ALIGN="LEFT"/>settlement : datetime<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"rateslib.rs.FXRates" [color="black", fontcolor="black", label=<{FXRates|ad : int<br ALIGN="LEFT"/>base<br ALIGN="LEFT"/>currencies : list[Ccy]<br ALIGN="LEFT"/>fx_array : list[list[DualTypes]]<br ALIGN="LEFT"/>fx_rates : list[FXRate]<br ALIGN="LEFT"/>fx_vector : list[DualTypes]<br ALIGN="LEFT"/>|get_ccy_index(currency: Ccy): int \| None<br ALIGN="LEFT"/>rate(lhs: Ccy, rhs: Ccy): Optional[DualTypes]<br ALIGN="LEFT"/>set_ad_order(ad: ADOrder): None<br ALIGN="LEFT"/>to_json(): str<br ALIGN="LEFT"/>update(fx_rates: list[FXRate]): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"rateslib.default.Fixings" [color="black", fontcolor="black", label=<{Fixings|directory<br ALIGN="LEFT"/>loaded : dict[str, pd.Series[float]]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"rateslib.rs.FlatBackwardInterpolator" [color="black", fontcolor="black", label=<{FlatBackwardInterpolator|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"rateslib.rs.FlatForwardInterpolator" [color="black", fontcolor="black", label=<{FlatForwardInterpolator|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"rateslib.rs.LinearInterpolator" [color="black", fontcolor="black", label=<{LinearInterpolator|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"rateslib.rs.LinearZeroRateInterpolator" [color="black", fontcolor="black", label=<{LinearZeroRateInterpolator|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"rateslib.rs.LogLinearInterpolator" [color="black", fontcolor="black", label=<{LogLinearInterpolator|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"rateslib.rs.Modifier" [color="black", fontcolor="black", label=<{Modifier|Act : str<br ALIGN="LEFT"/>F : str<br ALIGN="LEFT"/>ModF : str<br ALIGN="LEFT"/>ModP : str<br ALIGN="LEFT"/>P : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"rateslib.rs.NamedCal" [color="black", fontcolor="black", label=<{NamedCal|union_cal<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"rateslib.default.NoInput" [color="black", fontcolor="black", label=<{NoInput|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"rateslib.rs.NullInterpolator" [color="black", fontcolor="black", label=<{NullInterpolator|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"rateslib.rs.PPSplineDual" [color="black", fontcolor="black", label=<{PPSplineDual|c : list[Dual] \| None<br ALIGN="LEFT"/>k : int<br ALIGN="LEFT"/>n : int<br ALIGN="LEFT"/>t : list[float]<br ALIGN="LEFT"/>|bspldnev(x: list[float], i: int, m: int): list[Dual]<br ALIGN="LEFT"/>bsplev(x: list[float], i: int): list[Dual]<br ALIGN="LEFT"/>bsplmatrix(tau: list[float], left_n: int, right_n: int): Arr2dF64<br ALIGN="LEFT"/>csolve(tau: list[float], y: list[Dual], left_n: int, right_n: int, allow_lsq: bool): None<br ALIGN="LEFT"/>ppdnev(x: list[float], m: int): list[Dual]<br ALIGN="LEFT"/>ppdnev_single(x: Number, m: int): Dual<br ALIGN="LEFT"/>ppdnev_single_dual(x: Number, m: int): Dual<br ALIGN="LEFT"/>ppdnev_single_dual2(x: Number, m: int): Dual2<br ALIGN="LEFT"/>ppev(x: list[float]): list[Dual]<br ALIGN="LEFT"/>ppev_single(x: Number): Dual<br ALIGN="LEFT"/>ppev_single_dual(x: Number): Dual<br ALIGN="LEFT"/>ppev_single_dual2(x: Number): Dual2<br ALIGN="LEFT"/>to_json(): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"rateslib.rs.PPSplineDual2" [color="black", fontcolor="black", label=<{PPSplineDual2|c : list[Dual2] \| None<br ALIGN="LEFT"/>k : int<br ALIGN="LEFT"/>n : int<br ALIGN="LEFT"/>t : list[float]<br ALIGN="LEFT"/>|bspldnev(x: list[float], i: int, m: int): list[Dual2]<br ALIGN="LEFT"/>bsplev(x: list[float], i: int): list[Dual2]<br ALIGN="LEFT"/>bsplmatrix(tau: list[float], left_n: int, right_n: int): Arr2dF64<br ALIGN="LEFT"/>csolve(tau: list[float], y: list[Dual2], left_n: int, right_n: int, allow_lsq: bool): None<br ALIGN="LEFT"/>ppdnev(x: list[float], m: int): list[Dual2]<br ALIGN="LEFT"/>ppdnev_single(x: Number, m: int): Dual2<br ALIGN="LEFT"/>ppdnev_single_dual(x: Number, m: int): Dual<br ALIGN="LEFT"/>ppdnev_single_dual2(x: Number, m: int): Dual2<br ALIGN="LEFT"/>ppev(x: list[float]): list[Dual2]<br ALIGN="LEFT"/>ppev_single(x: Number): Dual2<br ALIGN="LEFT"/>ppev_single_dual(x: Number): Dual<br ALIGN="LEFT"/>ppev_single_dual2(x: Number): Dual2<br ALIGN="LEFT"/>to_json(): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"rateslib.rs.PPSplineF64" [color="black", fontcolor="black", label=<{PPSplineF64|c : list[float] \| None<br ALIGN="LEFT"/>k : int<br ALIGN="LEFT"/>n : int<br ALIGN="LEFT"/>t : list[float]<br ALIGN="LEFT"/>|bspldnev(x: list[float], i: int, m: int): list[float]<br ALIGN="LEFT"/>bsplev(x: list[float], i: int): list[float]<br ALIGN="LEFT"/>bsplmatrix(tau: list[float], left_n: int, right_n: int): Arr2dF64<br ALIGN="LEFT"/>csolve(tau: list[float], y: list[float], left_n: int, right_n: int, allow_lsq: bool): None<br ALIGN="LEFT"/>ppdnev(x: list[float], m: int): list[float]<br ALIGN="LEFT"/>ppdnev_single(x: Number, m: int): float<br ALIGN="LEFT"/>ppdnev_single_dual(x: Number, m: int): Dual<br ALIGN="LEFT"/>ppdnev_single_dual2(x: Number, m: int): Dual2<br ALIGN="LEFT"/>ppev(x: list[float]): list[float]<br ALIGN="LEFT"/>ppev_single(x: Number): float<br ALIGN="LEFT"/>ppev_single_dual(x: Number): Dual<br ALIGN="LEFT"/>ppev_single_dual2(x: Number): Dual2<br ALIGN="LEFT"/>to_json(): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"rateslib.rs.RollDay" [color="black", fontcolor="black", label=<{RollDay|<br ALIGN="LEFT"/>|EoM(): 'RollDay'<br ALIGN="LEFT"/>IMM(): 'RollDay'<br ALIGN="LEFT"/>Int(val: int): 'RollDay'<br ALIGN="LEFT"/>SoM(): 'RollDay'<br ALIGN="LEFT"/>Unspecified(): 'RollDay'<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"rateslib.rs.UnionCal" [color="black", fontcolor="black", label=<{UnionCal|calendars : list[Cal]<br ALIGN="LEFT"/>settlement_calendars : list[Cal]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"rateslib.dual.variable.Variable" [color="black", fontcolor="black", label=<{Variable|dual : Arr1dF64<br ALIGN="LEFT"/>real : float<br ALIGN="LEFT"/>vars : tuple[str, ...]<br ALIGN="LEFT"/>|to_dual(): Dual<br ALIGN="LEFT"/>to_dual2(): Dual2<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"rateslib.rs._DateRoll" [color="black", fontcolor="black", label=<{_DateRoll|<br ALIGN="LEFT"/>|add_bus_days(date: datetime, days: int, settlement: bool): datetime<br ALIGN="LEFT"/>add_days(date: datetime, days: int, modifier: Modifier, settlement: bool): datetime<br ALIGN="LEFT"/>add_months(date: datetime, months: int, modifier: Modifier, roll: RollDay, settlement: bool): datetime<br ALIGN="LEFT"/>bus_date_range(start: datetime, end: datetime): list[datetime]<br ALIGN="LEFT"/>cal_date_range(start: datetime, end: datetime): list[datetime]<br ALIGN="LEFT"/>is_bus_day(date: datetime): bool<br ALIGN="LEFT"/>is_non_bus_day(date: datetime): bool<br ALIGN="LEFT"/>is_settlement(date: datetime): bool<br ALIGN="LEFT"/>lag(date: datetime, days: int, settlement: bool): datetime<br ALIGN="LEFT"/>roll(date: datetime, modifier: Modifier, settlement: bool): datetime<br ALIGN="LEFT"/>to_json(): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"rateslib.rs._DualOps" [color="black", fontcolor="black", label=<{_DualOps|<br ALIGN="LEFT"/>|grad1(vars: Sequence[str]): Arr1dF64<br ALIGN="LEFT"/>grad2(vars: Sequence[str]): Arr2dF64<br ALIGN="LEFT"/>ptr_eq(other: Self): bool<br ALIGN="LEFT"/>to_json(): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"rateslib.rs.Cal" -> "rateslib.rs._DateRoll" [arrowhead="empty", arrowtail="none"];
"rateslib.rs.Dual" -> "rateslib.rs._DualOps" [arrowhead="empty", arrowtail="none"];
"rateslib.rs.Dual2" -> "rateslib.rs._DualOps" [arrowhead="empty", arrowtail="none"];
"rateslib.rs.NamedCal" -> "rateslib.rs._DateRoll" [arrowhead="empty", arrowtail="none"];
"rateslib.rs.UnionCal" -> "rateslib.rs._DateRoll" [arrowhead="empty", arrowtail="none"];
}
